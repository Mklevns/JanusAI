[build-system]
requires = ["setuptools>=68", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "janus-ai"
version = "0.1.0"
description = "A research framework for symbolic regression, AI Interpretability machine learning, and scientific discovery"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Michael Evans", email = "michael965@gmail.com"},
]
keywords = [
    "symbolic-regression",
    "machine-learning",
    "scientific-discovery",
    "ai-interpretability",
    "physics-discovery",
    "reinforcement-learning"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Physics",
]

# Core dependencies required for the project to run
dependencies = [
    # Core scientific computing
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "sympy>=1.12",
    "pandas>=2.0.0",
    
    # Machine learning
    "torch>=2.0.0",
    "stable-baselines3>=2.0.0",
    
    # Configuration and data validation
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "omegaconf>=2.3.0",
    "PyYAML",
    "python-dotenv",
    "json5",
    "toml",
    
    # Utilities
    "tqdm>=4.65.0",
    "rich>=13.0.0",
    "click>=8.1.0",
    "GitPython",
    "requests",
    "setuptools",

    # Logging and monitoring
    "structlog>=23.1.0",
]

[project.optional-dependencies]
# Development dependencies for testing, linting, and formatting
dev = [
    # Code formatting and linting
    "black[jupyter]>=23.3.0",
    "ruff>=0.1.0",
    "isort>=5.12.0",
    "mypy>=1.4.0",
    "pre-commit>=3.3.0",
    
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "hypothesis>=6.80.0",
    "py",
    
    # Documentation
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
    "jinja2",
    
    # Type stubs
    "types-PyYAML",
    "types-requests",
    "types-setuptools",
]

# Visualization dependencies
viz = [
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "graphviz>=0.20.0",
    "Pillow",
]

# AI/ML extras for LLM integration and advanced models
ml = [
    "transformers>=4.30.0",
    "einops>=0.6.0",
]

# Distributed computing dependencies
distributed = [
    "ray[default]>=2.5.0",
    "ray[tune]>=2.5.0",
    "ray[rllib]>=2.5.0",
    "joblib>=1.3.0",
]

# Experiment tracking dependencies
tracking = [
    "wandb>=0.15.0",
]

# Convenience group to install all optional dependencies
all = [
    "janus-ai[dev,viz,ml,distributed,tracking]",
]

[project.scripts]
janus = "JanusAI.cli.main:main"

[project.urls]
Homepage = "https://github.com/Mklevns/JanusAI"
Documentation = "https://janus-ai.readthedocs.io"
Repository = "https://github.com/Mklevns/JanusAI"
Issues = "https://github.com/Mklevns/JanusAI/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["JanusAI*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt"]

# --- Tool Configurations ---

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs|\.git|\.hg|\.mypy_cache|\.tox|\.venv|
  _build|buck-out|build|dist|__pycache__
)/
'''

[tool.ruff]
line-length = 100
target-version = "py38"
select = [
    "E", "W", "F", "I", "N", "D", "UP", "B", "C4", "SIM", "TID",
    "Q", "ARG", "PTH", "ERA", "PD", "PGH", "RUF"
]
ignore = [
    "D100", "D101", "D102", "D103", "D104", "D105", "D107",
    "D203", "D213", "E501",
]
exclude = [
    ".bzr", ".direnv", ".eggs", ".git", ".hg", ".mypy_cache",
    ".nox", ".pants.d", ".ruff_cache", ".svn", ".tox", ".venv",
    "__pypackages__", "_build", "buck-out", "build", "dist",
    "node_modules", "venv", "*/migrations/*", "**/__pycache__",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/*" = ["D", "ARG"]

[tool.ruff.isort]
known-first-party = ["JanusAI"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
pretty = true
show_error_codes = true
show_error_context = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = [
    "torch.*", "transformers.*", "ray.*", "gym.*", "wandb.*",
    "matplotlib.*", "seaborn.*", "plotly.*", "scipy.*",
    "pandas.*", "sklearn.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["JanusAI/tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=JanusAI",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "-n=auto",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
    "distributed: marks tests that require distributed setup",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
branch = true
source = ["JanusAI"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/migrations/*",
    "*/conftest.py",
    "*/setup.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@typing.overload",
    "@overload",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["JanusAI"]
skip_gitignore = true
force_single_line = false
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true